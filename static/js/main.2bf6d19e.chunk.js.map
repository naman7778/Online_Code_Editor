{"version":3,"sources":["components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","state","code","this","language","filename","codeMerge","active","lang","languages","markup","css","className","style","display","value","onValueChange","setState","highlight","padding","marginTop","fontFamily","fontSize","overflow","minHeight","maxWidth","borderColor","Component","App","html","iframe","refs","document","contentDocument","head","getElementsByTagName","body","innerHTML","cssCode","createElement","textnode","createTextNode","appendChild","srcc","srcdoc","jsCode","setActiveFile","file","activeFile","js","onClick","ref","id","frameBorder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kTA2DeA,EAnDf,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,KAAK,IAHK,EADtB,0CAOI,WAAU,IAAD,OACL,EAA2CC,KAAKH,MAAzCI,EAAP,EAAOA,SAASC,EAAhB,EAAgBA,SAASC,EAAzB,EAAyBA,UAAUC,EAAnC,EAAmCA,OAC/BC,EAAMC,YAAUC,OAYpB,OATIF,EADS,UAAVJ,EACMK,YAAUC,OAGVD,YAAUE,IAOf,sBAAKC,UAAU,SAASC,MAAO,CAACC,QAAQP,EAAO,QAAQ,QAAvD,UACI,qBAAKK,UAAU,WAAf,SACKP,IAEL,8BACA,cAAC,IAAD,CACRU,MAAOZ,KAAKF,MAAMC,KAClBc,cAAe,SAAAd,GAAI,OAAI,EAAKe,SAAS,CAAEf,SAAO,WAC1CI,EAAUJ,EAAKE,OAEnBc,UAAW,SAAAhB,GAAI,OAAIgB,oBAAUhB,EAAMM,IACnCW,QAAS,GACTN,MAAO,CACPO,UAAU,GACRC,WAAY,sCACZC,SAAU,GACVC,SAAS,SACTC,UAAU,IACZC,SAAS,OACPC,YAAY,0BAzCtB,GAA4BC,aCgJbC,EAnJf,kDAEE,WAAY5B,GAAO,IAAD,8BAChB,cAAMA,IAURM,UAAU,SAACJ,EAAKE,GAEd,IAAIO,EAAI,EAAKV,MAAMU,IACfkB,EAAK,EAAK5B,MAAM4B,KAEdC,EAAS,EAAKC,KAAKD,OACnBE,EAAWF,EAAOG,gBAClBC,EAAOF,EAASG,qBAAqB,QAAQ,GAOnD,GALa,UAAV/B,IACD4B,EAASI,KAAKC,UAAYnC,EAC1B,EAAKe,SAAS,CAACY,KAAK3B,KAGT,OAAVE,EACH,GAAG4B,EAASG,qBAAqB,SAAS,GAExCH,EAASG,qBAAqB,SAAS,GAAGE,UAAUnC,EACpD,EAAKe,SAAS,CAACN,IAAIT,QAEjB,CACF,IAAMoC,EAAUN,EAASO,cAAc,SACnCC,EAAWR,EAASS,eAAevC,GACvCoC,EAAQI,YAAYF,GACpBN,EAAKQ,YAAYJ,GAInB,GAAa,MAAVlC,EAED,GAAG4B,EAASG,qBAAqB,UAAU,GAC3C,CACEH,EAASG,qBAAqB,UAAU,GAAGE,UAAUnC,EAKrD,IAAIyC,EAAK,sBAAD,OAAuBhC,EAAvB,2BAA6CT,EAA7C,2BAAmE2B,EAAnE,kBACRC,EAAOc,OAAOD,MAEZ,CACF,IAAME,EAASb,EAASO,cAAc,UAClCC,EAAWR,EAASS,eAAevC,GACvC2C,EAAOH,YAAYF,GACnBN,EAAKQ,YAAYG,KAvDL,EA6DlBC,cAAc,SAACC,GACb,EAAK9B,SAAS,CACZ+B,WAAWD,KA7Db,EAAK9C,MAAM,CACPC,KAAK,GACLS,IAAI,GACJkB,KAAK,GACLoB,GAAG,GACHD,WAAW,UAPC,EAFpB,0CA8GE,WAAU,IAAD,OACP,OACE,oCACE,yBAASpC,UAAU,SAAnB,uCAGA,0BAASA,UAAU,gBAAnB,UACE,0BAASA,UAAU,SAAnB,UACE,+CACA,+BACE,oBAAIsC,QAAS,kBAAI,EAAKJ,cAAc,WAApC,wBAGA,oBAAII,QAAS,kBAAI,EAAKJ,cAAc,QAApC,uBAGA,oBAAII,QAAS,kBAAI,EAAKJ,cAAc,OAApC,4BAMJ,0BAASlC,UAAU,UAAnB,UACI,cAAC,EAAD,CAAQL,OAA+B,UAAvBJ,KAAKF,MAAM+C,WAAiC3C,SAAS,OAAOD,SAAS,SAASE,UAAWH,KAAKG,YAC9G,cAAC,EAAD,CAAQC,OAA+B,OAAvBJ,KAAKF,MAAM+C,WAA8B3C,SAAS,MAAMD,SAAS,MAAME,UAAWH,KAAKG,YACvG,cAAC,EAAD,CAAQC,OAA+B,MAAvBJ,KAAKF,MAAM+C,WAA6B3C,SAAS,aAAaD,SAAS,KAAKE,UAAWH,KAAKG,eAEhH,wBAAQ6C,IAAI,SAASvC,UAAU,SAASwC,GAAG,SAASC,YAAa,gBAzI3E,GAAyB1B,aCOV2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASkC,eAAe,SAM1BZ,M","file":"static/js/main.2bf6d19e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport CodeEditor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-css';\n// import 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/themes/prism-coy.css';\n\nexport class Editor extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            code:''\n        }\n    }\n    render() {\n        const {language,filename,codeMerge,active}=this.props\n        let lang= languages.markup\n\n        if(language==\"markup\"){\n            lang=languages.markup\n        }\n        else{\n            lang=languages.css\n        }\n        // else if(language==\"js\"){\n        //     lang=languages.js\n        // }\n\n        return (\n            <div className=\"editor\" style={{display:active?'unset':'none'}}>\n                <div className=\"filename\">\n                    {filename}\n                </div>\n                <div>\n                <CodeEditor\n        value={this.state.code}\n        onValueChange={code => this.setState({ code },()=>{\n            codeMerge(code,language)\n        })}\n        highlight={code => highlight(code, lang)}\n        padding={10}\n        style={{\n        marginTop:22,\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          overflow:'scroll',\n          minHeight:800,\n        maxWidth:\"100%\",\n          borderColor:'transparent'\n        }}\n      />\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default Editor\n","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport './App.css'\nimport Editor from './components/Editor'\n\nexport class App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n        code:'',\n        css:'',\n        html:'',\n        js:'',\n        activeFile:'markup'\n    }\n}\n\n  codeMerge=(code,language)=>{ //function to assign a tag to the language\n\n    let css=this.state.css\n    let html=this.state.html\n\n    const iframe = this.refs.iframe;\n    const document = iframe.contentDocument;\n    const head = document.getElementsByTagName('head')[0];\n\n    if(language==\"markup\"){\n      document.body.innerHTML = code;\n      this.setState({html:code})\n    }\n    \n    if(language==\"css\"){  \n    if(document.getElementsByTagName('style')[0])\n    {\n      document.getElementsByTagName('style')[0].innerHTML=code\n      this.setState({css:code})\n    }\n    else{\n      const cssCode = document.createElement('style');\n      var textnode = document.createTextNode(code)\n      cssCode.appendChild(textnode)\n      head.appendChild(cssCode); \n    }\n    }\n\n    if(language==\"js\"){\n\n      if(document.getElementsByTagName('script')[0])\n      {\n        document.getElementsByTagName('script')[0].innerHTML=code\n\n        //This is done because html won't recongnize the later added js code\n        //Basically a page reload in iframe\n\n        let srcc=`<html><head><style>${css}</style><script>${code}</script><body>${html}</body></html>`\n        iframe.srcdoc=srcc\n      }\n      else{\n        const jsCode = document.createElement('script');\n        var textnode = document.createTextNode(code)\n        jsCode.appendChild(textnode)\n        head.appendChild(jsCode);\n      }\n    }\n\n  }\n\n  setActiveFile=(file)=>{\n    this.setState({\n      activeFile:file\n    })\n\n  }\n  /*\n  function PostData() {\n    const url = \"\"\n    const [data, setData] = useState({\n      api_dev_hey : \"\",\n      api_paste_code : \"\",\n      api_paste_expire_date : \"\",\n      api_paste_format : \"\"\n    })\n  }\n\n  shareFile=()=>{\n    const url = 'https://pastebin.com/api/api_post.php'\n    const data = \"\"\n    const language = \"\"\n    if(this.state.activeFile==\"markup\")\n    {\n      data = this.state.html\n      language = \"HTML\"\n    }\n    if(this.state.activeFile==\"css\")\n    {\n      data = this.state.css\n      language = \"CSS\"\n    }\n    if(this.state.activeFile==\"js\")\n    {\n      data = this.state.js\n      language = \"JavaScript\"\n    }\n    Axios.post(url,{\n      api_dev_key : 'oEVvMuvfoVe3_PxHdMgy64KAam_rESL5',\n      api_paste_code : data,\n      api_paste_expire_date : \"N\",\n      api_paste_format : language\n    })\n    .then(res=> {\n      console.alert(res.data)\n    })\n  }*/\n\n  render() {\n    return (\n      <section>\n        <section className=\"header\">\n           Easy Web Live Code Editor\n        </section>\n        <section className=\"maincontainer\">\n          <section className=\"filexp\">\n            <h3>File Explorer</h3>\n            <ul>\n              <li onClick={()=>this.setActiveFile(\"markup\")}>\n                index.html\n              </li>\n              <li onClick={()=>this.setActiveFile(\"css\")}>\n                index.css\n              </li>\n              <li onClick={()=>this.setActiveFile(\"js\")}>\n                index.js\n              </li>\n            </ul>\n            \n          </section>\n          <section className=\"editors\">\n              <Editor active={this.state.activeFile==\"markup\"?true:false} filename=\"HTML\" language=\"markup\" codeMerge={this.codeMerge}/>\n              <Editor active={this.state.activeFile==\"css\"?true:false} filename=\"CSS\" language=\"css\" codeMerge={this.codeMerge}/>\n              <Editor active={this.state.activeFile==\"js\"?true:false} filename=\"JavaScript\" language=\"js\" codeMerge={this.codeMerge}/>\n          </section>\n          <iframe ref=\"iframe\" className=\"output\" id=\"output\" frameBorder= \"0\">\n\n          </iframe >\n        </section>\n        \n      </section>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}